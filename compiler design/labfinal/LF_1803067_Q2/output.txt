In line no 3, Inserting p with type INT_TYPE in symbol table.
In line no 4, Inserting q with type INT_TYPE in symbol table.
Parsing finished!
============= INTERMEDIATE CODE===============
  0: start              -1
  1: ld_int              8
  2: store               0
  3: ld_var              0
  4: ld_int             12
  5: ld_int              1
  6: sub                -1
  7: add                -1
  8: store               1
  9: ld_var              1
 10: ld_int             20
 11: eql                11
 12: if_start            9
 13: ld_var              1
 14: ld_int              1
 15: add                -1
 16: store               1
 17: else_start          9
 18: else_end            9
 19: ld_var              1
 20: ld_int             19
 21: eql                21
 22: if_start            9
 23: ld_var              1
 24: ld_int              1
 25: sub                -1
 26: store               1
 27: else_start          9
 28: else_end            9
 29: halt               -1
============= ASM CODE===============

;start -1
.686
.model flat, c
include C:\masm32\include\msvcrt.inc
includelib C:\masm32\lib\msvcrt.lib

.stack 100h
printf PROTO arg1:Ptr Byte, printlist:VARARG
scanf PROTO arg2:Ptr Byte, inputlist:VARARG

.data
output_integer_msg_format byte "%d", 0Ah, 0
output_string_msg_format byte "%s", 0Ah, 0
input_integer_format byte "%d",0

number sdword ?

.code

main proc
	push ebp
	mov ebp, esp
	sub ebp, 100
	mov ebx, ebp
	add ebx, 4

;ld_int 8
	mov eax, 8
	mov dword ptr [ebx], eax
	add ebx, 4


;store 0
	mov eax, [ebx-4]
	mov dword ptr [ebp-0], eax

;ld_var 0
	mov eax, [ebp-0]
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 12
	mov eax, 12
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 1
	mov eax, 1
	mov dword ptr [ebx], eax
	add ebx, 4


;sub -1
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	sub edx, eax
	mov eax, edx
	mov dword ptr [ebx], eax
	add ebx, 4


;add -1
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	add eax, edx
	mov dword ptr [ebx], eax
	add ebx, 4


;store 1
	mov eax, [ebx-4]
	mov dword ptr [ebp-4], eax

;ld_var 1
	mov eax, [ebp-4]
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 20
	mov eax, 20
	mov dword ptr [ebx], eax
	add ebx, 4


;eql 11
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	cmp edx, eax
	je LS11
	mov dword ptr [ebx], 0
	jmp LE11
	LS11: mov dword ptr [ebx], 1
	LE11: add ebx, 4



;if_start 9
	mov eax, [ebx-4]
	cmp eax, 0
	jle ELSE_START_LABEL_9


;ld_var 1
	mov eax, [ebp-4]
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 1
	mov eax, 1
	mov dword ptr [ebx], eax
	add ebx, 4


;add -1
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	add eax, edx
	mov dword ptr [ebx], eax
	add ebx, 4


;store 1
	mov eax, [ebx-4]
	mov dword ptr [ebp-4], eax

;else_start 9
	jmp ELSE_END_LABEL_9
ELSE_START_LABEL_9:


;else_end 9
ELSE_END_LABEL_9:


;ld_var 1
	mov eax, [ebp-4]
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 19
	mov eax, 19
	mov dword ptr [ebx], eax
	add ebx, 4


;eql 21
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	cmp edx, eax
	je LS21
	mov dword ptr [ebx], 0
	jmp LE21
	LS21: mov dword ptr [ebx], 1
	LE21: add ebx, 4



;if_start 9
	mov eax, [ebx-4]
	cmp eax, 0
	jle ELSE_START_LABEL_9


;ld_var 1
	mov eax, [ebp-4]
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 1
	mov eax, 1
	mov dword ptr [ebx], eax
	add ebx, 4


;sub -1
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	sub edx, eax
	mov eax, edx
	mov dword ptr [ebx], eax
	add ebx, 4


;store 1
	mov eax, [ebx-4]
	mov dword ptr [ebp-4], eax

;else_start 9
	jmp ELSE_END_LABEL_9
ELSE_START_LABEL_9:


;else_end 9
ELSE_END_LABEL_9:


;halt -1
	add ebp, 100
	mov esp, ebp
	pop ebp
	ret
main endp
end
