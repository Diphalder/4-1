"[^"\\]*(?:\\.[^"\\]*)*"

{number} {yylval = atoi(yytext); return(NUM);}
{ID}        {strcpy(yylval.str_val, yytext);  return ID;  }


________________-example1
code : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN OPST SEMI  |  ID SEMI ;
OPST : ID ADDOP ID ;


code : DEC code | DEC;
DEC : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN OPST SEMI  |  ID SEMI ;
OPST : ID OPST_ ;
OPST_ : ADDOP ID OPST_ |  ; 


input : 
"int a = b + c ;
double a = b + c ;"




example2_______________

%%
code : DEC code | DEC;
DEC : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN OPST SEMI  |  ID SEMI ;
OPST : ID OPST_ ;
OPST_ : ADDOP ID OPST_ |  SUBOP ID OPST_ | MULOP ID OPST_  | DIVOP ID OPST_ |;  
%%


input :
int a = b + c ;
double a = b + c ;
int a = b + c *  d - e / x  ;




_____________________---example3__________-

%%
code : DEC code |  DEC ;
DEC : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN exp SEMI  |  ID SEMI ;
exp : exp ADDOP terminal | terminal {printf("add op\n")};
terminal : terminal MULOP factor | factor {printf("multiple op\n")} ;
factor : ID | ICONST ;
%%

input :
"int a = 10 + d * 100;"


__________________________________example4__________

%left LT GT /*LT GT has lowest precedence*/
%left ADDOP 
%left MULOP /*MULOP has highest precedence*/


%%
code : DEC code |  DEC ;
DEC : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN exp SEMI  |  ID SEMI ;
exp : exp ADDOP factor | exp MULOP factor | factor  ;
factor : ID | ICONST ;
%%


input :
"int a = 10 + d * 100;"

________________________________example5__________


%%
code : DEC code | ifst code |  DEC  | ifst ;
DEC : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN exp SEMI  |  ID SEMI ;
exp : exp ADDOP factor | exp MULOP factor | factor  ;
factor : ID | ICONST ;
ifst : IF LPAREN condi RPAREN LBRACE code RBRACE ;
condi : factor condiop factor | factor ;
condiop : GT | LT | EQUOP ; 
%%

input:
"int a = 10 + d * 100;

if( a<5)
{

    int a = 10 + d * 100;
    int a = 10 + d * 100;

    if(a)
    {
        int a = 10 + d * 100;

    }
}
"




_______________________example6__________

%%
code : DEC code | ifst code |  DEC  | ifst  | ;
DEC : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN exp SEMI  |  ID SEMI ;
exp : exp ADDOP factor | exp condiop factor | exp MULOP factor | factor  ;
factor : ID | ICONST ;
ifst : IF LPAREN exp RPAREN LBRACE code RBRACE elsest ;
condiop : GT | LT | EQUOP ; 
elsest : ELSE LBRACE code RBRACE | ;
%%

input:
"
int a = 10 + d * 100;

if( a<5)
{

    int a = 10 + d * 100;
    int a = 10 + d * 100;

    if(a)
    {

        int a = 10 + d * 100;


    }

}
else
{


}

if(10)
    {

        int a = 10 + d * 100;

    }
    else
    {

    }


"





________________________________example7__________


%%
code : DEC code | ifst code |  DEC  | ifst  | ;
DEC : INT DEF | DOUBLE DEF | CHAR DEF ;
DEF :  ID ASSIGN exp SEMI  |  ID SEMI ;
exp : exp ADDOP factor | exp condiop factor | exp SUBOP factor |  exp DIVOP factor| exp MULOP factor | factor  ;
factor : ID | ICONST ;
ifst : IF LPAREN exp RPAREN LBRACE code RBRACE elsest ;
condiop : GT | LT | EQUOP ; 
elsest : ELSE LBRACE code RBRACE | ;
%%

input:"int a = 10 + d * 100;
if( a<5)
{
   int a = 10 + d * 100;
    int a = 10 + d * 100;
    if(a)
    {
        int a = 10 + d * 100;
    }

}
else
{
    double a = 10/100;
}

if(10)
    {
        int a = 10 + d * 100;
    }
    else
    {

    }

"



_________________________example8:______________________

%token<str_val> ID
%token<int_val> ICONST
%union
{
	char str_val[100];
	int int_val;
}



{ID}        {strcpy(yylval.str_val, yytext);  return ID;  }








_________________________example9____________________________



%type<int_val> type			/*return type of gettype() is int_val*/        
%type<int_val> factor		/*return type of gettype() is int_val*/  
%type<int_val> exp

%left LT GT 			/*LT GT has lowest precedence*/
%left ADDOP 
%left MULOP 			/*MULOP has highest precedence*/



%%
code : DEC code | ifst code |  DEC  | ifst  | assign_val | assign_val code;
DEC : type ID Z SEMI   { if(idcheck2($2)==0){insert($2 , $1);}};
Z : ASSIGN exp | ;
assign_val : ID ASSIGN exp SEMI;
type : INT {$$=INT_TYPE} | DOUBLE{$$=REAL_TYPE}  ;
exp : exp OP factor {if(typecheck($1,$3)){$$=$3;}} | factor {$$=$1; }  ;
OP :  ADDOP | condiop | SUBOP | DIVOP | MULOP ;
factor : ID { if(idcheck($1)){$$=gettype($1);}} | ICONST  {$$=INT_TYPE;} | FCONST   {$$=REAL_TYPE;};
ifst : IF LPAREN exp RPAREN LBRACE code RBRACE elsest ;
condiop : GT | LT | EQUOP ; 
elsest : ELSE LBRACE code RBRACE | ;
%%




input :
"
int a ;
int d ;
int c= 10 + e * 100;
int x;
x = a * 100.1;
double hi = 135.0;
hi = hi + 10;
int ruet =10;
int z  = ruet +10;"


/_________________________example10____________________________
%token INT FLOAT CHAR
%token ADDOP SUBOP MULOP DIVOP EQUOP LT GT
%token LPAREN RPAREN LBRACE RBRACE SEMI ASSIGN FUNCTION RET BEG MOD COLON
%token FCONST END ICONST
%token CCONST  

%token<str_val> ID

%type<int_val> var ICONST FCONST CCONST exp assignment type dec code




%left LT GT  			/*LT GT has lowest precedence*/
%left ADDOP SUBOP
%left MULOP DIVOP
%left MOD 			/*MULOP has highest precedence*/

%start code

%%
code : code code_ | ;
code_ : FUNCTION ID LPAREN newdec RPAREN Z;
Z: BEG statement END ;
statement : statement statement_ SEMI| ;
statement_: dec | assignment | return_ ;
return_ : RET exp  ;
exp : exp op var {if(typecheck($1,$3)){ $$=$3;} } | var {$$=$1;} ;
var : ICONST {$$=INT_TYPE}| FCONST {$$=REAL_TYPE} | ID { if(idcheck($1)){$$=gettype($1);}} |CCONST {$$=CHAR_TYPE}   ;
op : ADDOP | SUBOP | MULOP | DIVOP | EQUOP | LT | GT | MOD ;
dec : type ID ASSIGN exp  { insert($2 , $1); if(typecheck($1,$4)){$$=$1;} } 
	| type ID   { insert($2 , $1);    } ;
type : INT {$$=INT_TYPE}| FLOAT {$$=REAL_TYPE}|CHAR {$$=CHAR_TYPE;};
assignment : ID ASSIGN exp  {if(idcheck($1)){if(typecheck(gettype($1),$3)){$$=$3;}} };
newdec : ID COLON type  {if(idcheck2($1)==0){insert($1 , $3);}};
%%

input:

function isEven(n : int)
begin
a = 10; 
int a;
int a = 10;
int a = 10.0;
float b = 10.0;
char c = 'c';
int a = b+c;
return n % 2.0 == 0;
end
_______________________________________________________________________________________________
%token CHAR INT DOUBLE IF ELSE WHILE FOR CONTINUE BREAK VOID RETURN
%token ADDOP SUBOP MULOP DIVOP INCR DECR OROP ANDOP NOTOP EQUOP NEQUOP GTEQ GT LTEQ LT
%token LPAREN RPAREN LBRACE RBRACE SEMI ASSIGN COMMA
%token ID
%token ICONST
%token FCONST
%token CCONST
%token STRING

%right ASSIGN /*ASSIGN has lowest precedence*/
%left OROP
%left ANDOP
%left EQUOP NEQUOP
%left GTEQ GT LTEQ LT
%left ADDOP SUBOP
%left MULOP DIVOP
%right NOTOP INCR DECR
%left LPAREN RPAREN /*LPAREN has highest precedence*/

%start code



alpha     [a-zA-Z]
digit     [0-9]
alnum     {alpha}|{digit}
print     [ -~]

ID        {alpha}{alnum}*
ICONST    [0-9]{digit}*
FCONST    {digit}*"."{digit}+
CCONST    (\'{print}\')
STRING    \"{print}*\"
%%

"//".*     { } 

"int"      { return INT; }
"double"   { return DOUBLE; }
"char"	   { return CHAR; }

"if"	   {return IF;}
"else"	   {return ELSE;}
"while"    { return WHILE; }
"for"      { return FOR; }
"continue" { return CONTINUE; }
"break"    { return BREAK; }
"void"     { return VOID; }
"return"   { return RETURN; }

"+"        { return ADDOP; }
"-"        { return SUBOP; }
"*"        { return MULOP; }
"/"        { return DIVOP; }
"++"       { return INCR; }
"--"       { return DECR; }
"||"       { return OROP; }
"&&"       { return ANDOP; }
"!"        { return NOTOP; }
"=="       { return EQUOP; }
"!="       { return NEQUOP; }
">="       { return GTEQ; }
">"        { return GT; }
"<="       { return LTEQ; }
"<"        { return LT; }

"("        { return LPAREN; }
")"        { return RPAREN; }
"{"        { return LBRACE; }
"}"        { return RBRACE; }
";"        { return SEMI; }
","        { return COMMA; }
"="        { return ASSIGN; }

{ID}        {return ID;}
{ICONST}    {return ICONST;}
{FCONST}    {return FCONST;}
{CCONST}    {return CCONST;}
{STRING}    {return STRING;}

"\n"        { lineno += 1; }
[ \t\r\f]+  

.           { yyerror("Unrecognized character"); }







__________________________________________________________


%token INPUT  IF  ELSE  ELSEIF  PRINT  INT  FLOAT  CHAR
%token ADDOP SUBOP  MULOP  DIVOP  EQUOP  GT  LT  MOD
%token  COLON LPAREN RPAREN LBRACE RBRACE COMMA SEMI ASSIGN LTHIRT RTHIRT
%token  ID  ICONST  FCONST  CCONST STRING

%type<int_val> T exp assignment condi type TT vari arraydata
%type<str_val> ID 



%left LT GT  			/*LT GT has lowest precedence*/
%left ADDOP SUBOP
%left MULOP DIVOP
%left MOD 			/*MULOP has highest precedence*/

%start code_

%%
code_ : code_ code | code ;
code : elseif | dec | assignment | printfun ;
dec : type ID { insert( $2 , $1) ; }  
		| type ID ASSIGN exp { insert( $2 , $1) ; typecheck( gettype( $2 )  , $4) ;} 
		| type ID ASSIGN INPUT LPAREN STRING RPAREN  { insert( $2 , $1) ; }
		| type ID ASSIGN arraydata { insert( $2 , $1) ; typecheck( gettype( $2 )  , $4) ;}
		| type ID ASSIGN exp { insert( $2 , $1) ; typecheck( gettype( $2 )  , $4) ;}     ;
type : INT {$$ =INT_TYPE ; } 
		| FLOAT { $$ = REAL_TYPE ;}  
		| CHAR {$$= CHAR_TYPE ;} ;
printfun : PRINT LPAREN STRING RPAREN ;
assignment :  ID ASSIGN exp {$$ = typecheck( gettype( $1 )  , $3 ) ;} 
		|  ID ASSIGN arraydata { $$ = typecheck( gettype( $1 )  , $3 ) ; } ; 
exp : exp op T {  $$ = typecheck( $1 , $3 ) ;  } 
		| T { $$ = $1 ; };
T : ID {$$=gettype($1) ;}  
		| ICONST  {$$ =INT_TYPE ; } 
		| FCONST { $$ = REAL_TYPE ;} 
		| CCONST {$$= CHAR_TYPE ;} ;
op : ADDOP | SUBOP | MULOP | DIVOP ;
condi : condi cop T {  $$ = typecheck( $1 , $3 ) ;  } | T { $$ = $1 ; } ;
cop : EQUOP | GT | LT ;
elseif : IF condi COLON code_ optionalelif_ optionalelse ;
optionalelif_ : optionalelif_ optionalelif | optionalelif ;
optionalelif : ELSEIF condi COLON code_ | ;
optionalelse : ELSE COLON code_ ;
arraydata : LTHIRT vari RTHIRT { $$= $2; } 
		| LTHIRT RTHIRT { $$=UNDEF_TYPE ;} ;
vari : vari COMMA TT { $$= typecheck( $1, $3) ;} 
	| TT { $$ = $1; }; 
TT : ICONST  {$$ =INT_TYPE ; } 
	| FCONST { $$ = REAL_TYPE ;} 
	| CCONST {$$= CHAR_TYPE ;} ;
%%






input : 
float num = input("Enter a number: ")
if num > 0:
    print("Positive number")
elif num == 0:
    print("Zero")
else:
    print("Negative number")
int a 
float b
a = b* 4 + 2 
int p 
p = 6 + 1
a = [ 2 ,34 , 5, 6] 
float t =  [ 2.1 ,34 , 5.4, 6.9] 





________________________________________________________________________________-








